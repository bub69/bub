################ DirectX ##################
Practical 1:Setup Directx 11, Window Framework And Initialize Direct3d Device
Create Project > Windows Forms App (.NET Framework)
.NET Framework 2.0
Click on Project / Solution

Add reference for microsoft.visualc.dll-
Windows\Microsoft.NET\Framework\v2.0.50727

For Microsoft.direct.directX , draw 3D- 
Windows\Microsoft.NET\DirectX for Managed Code\1.0.2902.0

After writing the script
BUild
Configuration Manager
Any CPU -> New
x64 -> x86
To fix the exception...
Debug > Windows > Exception settings > Find LoaderLock
Manage Debugging Assistants > Uncheck LoaderLock


using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX.Direct3D;
using Microsoft.DirectX;


namespace Practical1
{
    public partial class Form1 : Form
    {
        Microsoft.DirectX.Direct3D.Device device;
        public Form1()
        {
            InitializeComponent();
            InitDevice();

        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void InitDevice()
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;
            pp.SwapEffect = SwapEffect.Discard;
            device = new Device(0, DeviceType.Hardware, this, CreateFlags.HardwareVertexProcessing, pp);
        }

        public void Render()
        {
            device.Clear(ClearFlags.Target, Color.SaddleBrown, 0, 1);
            device.Present();
        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {

            Render();

        }
    }
}


Practical2:Buffers, Shaders and HLSL (Draw a triangle using Direct3D 11)
Prepare Documentation without appropriate description added.
Create Project same as prac 1
Add > References > Old references + MicrosoftVisualC.Dll
To find MicrosoftVisualC.Dll -> Windows -> Microsoft.NET -> Framework -> v2 wala folder -> MicrosoftVIsualC.Dll

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX;
using Microsoft.DirectX.Direct3D;

namespace Practical2
{
    public partial class Form1 : Form
    {
        private Device device;
        private CustomVertex.PositionColored[] vertex = new
       CustomVertex.PositionColored[3];
        public Form1()
        {
            InitializeComponent();

        }


        
        private void Form1_Load(object sender, EventArgs e)
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;
            pp.SwapEffect = SwapEffect.Discard; device = new Device(0, DeviceType.Hardware, this, CreateFlags.HardwareVertexProcessing, pp);
            device.Transform.Projection = Matrix.PerspectiveFovLH(3.14f / 4, device.Viewport.Width / device.Viewport.Height, 1f, 1000f);
            device.Transform.View = Matrix.LookAtLH(new Vector3(0, 0, 20), new Vector3(), new Vector3(0, 1, 0));
            device.RenderState.Lighting = false; vertex[0] = new CustomVertex.PositionColored(new Vector3(), Color.Black.ToArgb());
            vertex[1] = new CustomVertex.PositionColored(new Vector3(3, 0, 0), Color.Black.ToArgb());
            vertex[2] = new CustomVertex.PositionColored(new Vector3(0, 3, 0), Color.Black.ToArgb());
        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            device.Clear(ClearFlags.Target, Color.Lavender, 1, 0);
            device.BeginScene();
            device.VertexFormat = CustomVertex.PositionColored.Format;
            device.DrawUserPrimitives(PrimitiveType.TriangleList, vertex.Length / 3, vertex);
            device.EndScene();
            device.Present();
        }
    }
}


Practical3:Texturing (Texturing the triangle using direct 3D 11)
Download a Textured Image from the Internet.
Save it in your project directory
Follow same procedures as prac 2

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX;
using Microsoft.DirectX.Direct3D;

namespace Practical3
{
    public partial class Form1 : Form
    {
        private Device device;
        private CustomVertex.PositionTextured[] vertex = new CustomVertex.PositionTextured[3];
        private Texture texture;
        public Form1()
        {
            InitializeComponent();
        }



        private void Form1_Load(object sender, EventArgs e)
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;
            pp.SwapEffect = SwapEffect.Discard;
            device = new Device(0, DeviceType.Hardware, this, CreateFlags.HardwareVertexProcessing, pp);
            device.Transform.Projection = Matrix.PerspectiveFovLH(3.14f / 4, device.Viewport.Width / device.Viewport.Height, 1f, 1000f);
            device.Transform.View = Matrix.LookAtLH(new Vector3(0, 0, 20), new Vector3(), new Vector3(0, 1, 0));
            device.RenderState.Lighting = false;
            vertex[0] = new CustomVertex.PositionTextured(new Vector3(0, 1, 1), 0, 0);
            vertex[1] = new CustomVertex.PositionTextured(new Vector3(-5, -5, 1), -1, 0);
            vertex[2] = new CustomVertex.PositionTextured(new Vector3(5, -5, 1), 0, -1);
            texture = new Texture(device, new Bitmap("C:\\Users\\vidit\\source\\repos\\Practical3\\Practical3\\Picture1.png"), 0, Pool.Managed);

        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            device.Clear(ClearFlags.Target, Color.Black, 1, 0);
            device.BeginScene();
            device.SetTexture(0, texture);
            device.VertexFormat = CustomVertex.PositionTextured.Format;
            device.DrawUserPrimitives(PrimitiveType.TriangleList, vertex.Length / 3, vertex);
            device.EndScene();
            device.Present();

        }
    }
}


Practical4:Lightning (Programmable Diffuse Lightning using Direct 3D 11)
Create a project same as the previous 3 pracs
Configure the References

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX.Direct3D;
using Microsoft.DirectX;

namespace Practical4
{
    public partial class Form1 : Form

    {
        private Device device;
        private CustomVertex.PositionNormalColored[] vertex = new CustomVertex.PositionNormalColored[3];
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;
            pp.SwapEffect = SwapEffect.Discard;
            device = new Device(0, DeviceType.Hardware, this, CreateFlags.HardwareVertexProcessing, pp);
            device.Transform.Projection = Matrix.PerspectiveFovLH(3.14f / 4, device.Viewport.Width / device.Viewport.Height, 1f, 1000f);
            device.Transform.View = Matrix.LookAtLH(new Vector3(0, 0, 20), new Vector3(), new Vector3(0, 1, 0));
            device.RenderState.Lighting = false;
            vertex[0] = new CustomVertex.PositionNormalColored(new Vector3(0, 1, 1), new Vector3(1, 0, 1), Color.Green.ToArgb());
            vertex[1] = new CustomVertex.PositionNormalColored(new Vector3(-1, -1, 0), new Vector3(1, 0, 1), Color.Green.ToArgb());
            vertex[2] = new CustomVertex.PositionNormalColored(new Vector3(1, -1, 1), new Vector3(-1, 0, 1), Color.Green.ToArgb());
            device.RenderState.Lighting = true;
            device.Lights[0].Type = LightType.Directional;
            device.Lights[0].Diffuse = Color.White;
            device.Lights[0].Direction = new Vector3(0.8f, 0, -1);
            device.Lights[0].Enabled = true;
        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            device.Clear(ClearFlags.Target, Color.FloralWhite, 1, 0);
            device.BeginScene();
            device.VertexFormat = CustomVertex.PositionNormalColored.Format;
            device.DrawUserPrimitives(PrimitiveType.TriangleList, vertex.Length / 3, vertex);
            device.EndScene();
            device.Present();
        }
    }
}


Practical5:Loading models (image or File) using DirectX and rendering
Repeat the same steps as previous pracs
Just modify the code

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX;
using Microsoft.DirectX.Direct3D;


namespace Practical5
{
    public partial class Form1 : Form
    {
        Microsoft.DirectX.Direct3D.Device device;
        Microsoft.DirectX.Direct3D.Font font;
        Texture texture;
        public Form1()
        {
            InitializeComponent();
            InitializeDevice();
            InitFont();
            LoadTexture();
        }
        private void InitializeDevice()
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;
            pp.SwapEffect = SwapEffect.Discard;
            device = new Device(0, DeviceType.Hardware, this, CreateFlags.HardwareVertexProcessing, pp);

        }
        private void LoadTexture()
        {
            texture = TextureLoader.FromFile(device, "C:\\practicals\\STQA\\side files (output)\\text.img.jpg", 400, 400, 1, 0, Format.A8R8G8B8, Pool.Managed, Filter.Point, Filter.Point, Color.Transparent.ToArgb());
        }
        private void InitFont()
        {
            System.Drawing.Font f = new System.Drawing.Font("COMIC", 26f, FontStyle.Bold);
            font = new Microsoft.DirectX.Direct3D.Font(device, f);
        }
        private void Render()
        {
            device.Clear(ClearFlags.Target, Color.Orange, 0, 1);
            device.BeginScene();
            using (Sprite s = new Sprite(device))
            {
                s.Begin(SpriteFlags.AlphaBlend);
                s.Draw2D(texture, new Rectangle(0, 0, 0, 0), new Rectangle(0, 0, device.Viewport.Width, device.Viewport.Height), new Point(0, 0), 0f, new Point(0, 0), Color.LightCyan);
                font.DrawText(s, "Vidit Kaloya", new Point(0, 0), Color.Black);
                s.End();
            }
            device.EndScene();
            device.Present();
        }
        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            Render();
        }
    }
}


Practical6:2D ufo
Make a new folder sprites -
Drag drop the images

Main camera mai jaake do the size 16.5 
projection orthographic 
---------------
Drag and drop background
BACKGROUND -

Background ke inspector mai jaake sorting layer mai add 3 layers background, pickup, player and 
Add tag pickup all together to minimize time.
Background ke inspector mai set sorting layer as background.
Now drag and drop ufo image in sample scene. And add the sorting layer as player.

1)Add component box collider -
size: x-31.79 y-4
Offset: x-0 y-14


2)Add component box collider -
size: x-31.79 y-4
Offset: x-0 y- -14


3)Add component box collider -
size: x-31.79 y-4
Offset: x-14 y-0


4)Add component box collider -
size: x-31.79 y-4
Offset: x- -14 y-0


------------
PLAYER INSPECTOR-

Scale: X-0.75, Y-0.75 , Z-1

Add component rigidbody2d
Gravity-0

Add component circle collider2D
Radius - 2.15

Add component script -
playercontroller 
Speed - 10
Add the code for the same 
---------
Now drag and drop pickup in sample scene
-----------
PICKUP INSPECTOR -

Tag: Pickup

Give position as 5(anything until it's visible)

Add component circle collider2D- 
IsTrigger: on
Radius: 0.94

Add component script rotator-
Add the code

Now copy pickup multiple times in sample space( Ctrl+D) and change the positions (or drag them by middle mouse button.)

---------

Now right click on sample scene blank space and add  ui-text
Double click on text and then drag and drop waghera karlo text ko
Anchor ke upar hi target jesa box h usme jaake ek bottom-left wala alt dabake click Karo .
Change the name as count and text as Count too. Increase the font size waghera accordingly.
Now make another ui-text same way and give the name as WIN TEXT.
Same way target mai jaake put win in the center
And for now uncheck the text in win.
Now in player inspector put the win text and count text in player controller from drag and drop from the canvas we made now.
Also agar wintext ka nahi aaya toh go in the playercontroller ka code and change the count according to your pickups added.
Main camera ke inspector mai jaake add component new script and usme add cameracontroller aur fir uska code
Drag and drop player in camera controller ke inspector game object

-----------------------------------------------------------------------------------------------------
CODE-
PlayerController-
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class PlayerController : MonoBehaviour
{
    public float speed;
    private Rigidbody2D rbd;
    public Text winText;
    public Text countText;
    public int count = 0;

    // Start is called before the first frame update
    void Start()
    {
        rbd = GetComponent<Rigidbody2D>();
    }

    private void OnTriggerEnter2D(Collider2D other)
    {
        if(other.tag=="pickup")
        {
            other.gameObject.SetActive(false);
            count++;
            setCountText();
        }
    }

    void setCountText()
    {
        countText.text = "Count " + count.ToString();
        if(count==10)
        {
            winText.text = "You Won!";
        }
    }

    // Update is called once per frame
    void FixedUpdate()
    {
        float moveHorizontal = Input.GetAxis("Horizontal");
        float moveVertical = Input.GetAxis("Vertical");
        Vector2 movement = new Vector2(moveHorizontal,moveVertical);
        rbd.AddForce(movement*speed);
    }
}

CameraController-
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CameraController : MonoBehaviour
{
    public GameObject player;
    private Vector3 offset;
    // Start is called before the first frame update
    void Start()
    {
        offset = transform.position - player.transform.position;
    }

    // Update is called once per frame
    void LateUpdate()
    {
        transform.position = player.transform.position + offset;
    }
}

rotator-
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class rotator : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        transform.Rotate(new Vector3(0, 0, 45) * Time.deltaTime);
    }
}



Practical7:3D rollball
CODE-


PlayerController-
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class PlayerController : MonoBehaviour
{
    public Text winText;
    public Text countText;
    public int count;
    private Rigidbody rb;
    public float speed;
    // Start is called before the first frame update
    void Start()
    {
        count = 0;
        winText.text = "";
        rb = GetComponent<Rigidbody>();
        SetCountText();
    }

    // Update is called once per frame
    void FixedUpdate()
    {
        float moveHorizontal = Input.GetAxis("Horizontal");
        float moveVertical = Input.GetAxis("Vertical");
        Vector3 movement = new Vector3(moveHorizontal, 0.0f, moveVertical);
        rb.AddForce(movement * speed);
    }

    void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.CompareTag("PickUp"))
        {
            other.gameObject.SetActive(false);
            count = count + 1;
            SetCountText();
        }
    }
    void SetCountText()
    {
        countText.text = "Count : " + count.ToString();
        if (count >= 8)
        {
            winText.text = "You win!";
        }

    }
}



CameraController-
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CameraController : MonoBehaviour
{
    private Vector3 offset;
    public GameObject player;
    // Start is called before the first frame update
    void Start()
    {
        offset = transform.position - player.transform.position;
    }

    // Update is called once per frame
    void LateUpdate()
    {
        transform.position = player.transform.position + offset;
    }
}



Rotator-
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Rotator : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        transform.Rotate(new Vector3(15, 30, 45) * Time.deltaTime);
    }
}


























prac6:
AIM:To create a 2D UFO game.
STEPS:
Ufo game
2018.4.36fi version select
Student or personal purpose
New project - 2D game - Project Name- Create project

In Assets folder - Create folder - Sprite (name of folder) -add images In sprites folder from download- total 3 images (background,pickup,UFO)

Click on Assets then Open Scenes click on SampleScene and rename it as "ufo"
Then save it
In Sprite folder, select Background and drag and drop it to left side "Hierarchy" then select Scene mode.
Press 'F'
Gizmoz- 2nd option- uncheck show grid - then add ufo to hierarchy- rename ufo to Player in Inspector section
-In hierarchy-click on background- Inspector - Sorting Layer-Add sorting layer- +(plus) - name it as background- click on Background (in hierarchy) 
now select background as your sorting layer
-Same for player - make new sorting layer (named player) and select it
Select player in hierachy- inpsection- transform- Scale X(0.75) Y(0.75) Z(1)
In main camera from hierachy, set projection as orthographicSelect main camera from hierachy and then go to game mode - inspector- size- 16.5
Change background colour
Select player from hierachy- Add component -Physics 2D- Rigidbody 2d- then add script in player - "PlayerController" create and add
-In Assets double click on created script in visual studio
- Select player in hierachy - rigidbody- gravity scale -0
- Then set speed as 10 in script
- In player from hierachy-add component- circle collider 2d- set radius 2.15
-In background from hierachy- add box collider 2d-
set size X(31.79)Y(4)
Offset X(0) Y(14)

In box collider 2d, click on settings icon on right top-copy component - paste component as new  three times 

2nd box collider
set size X(31.79)Y(4)
Offset X(0) Y(-14)

3rd box collider
set size X(4)Y(31.79)
Offset X(14) Y(0)

4th box collider
set size X(4)Y(31.79)
Offset X(-14) Y(0)
-In maincamera from hierachy-add component-add script- named as ' CameraController'
-Select maincamera from hierachy-inspection- camera controller- Player-(drag and drop the player from hierachy)
- From sprite folder, drag Pickup into hierachy
- Select pickup from hierachy-add component-circle collider 2d
Pickup-inspection-add sorting layer-new-create pickup-select as sorting layer
- Circle collider-set radius as 0.94- for pickup from hierachy-add new script-name - 'rotator'
- Select pickup from hierachy-ctrl+d-set pickups in scene mode to different positions
- Select pickup from hierachy-inspection-tag option -add tag-+- name it as 'pickup'(remember) then select it for all the pickups
- Select istrigger in circle collider 2d of pickup
- Check istrigger for all the pickups
-In hierachy-select and right click ufo-gameobject-UI-Text
-Two texts named 'countText' and 'winText'
- Select player from hierachy -in script -drag and drop wintext and counttext from hierachy

CODES:

CameraController.cs:
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CameraController : MonoBehaviour
{
    public GameObject player;
    private Vector3 offset;
    // Start is called before the first frame update
    void Start()
    {
        offset = transform.position - player.transform.position;

    }

    // Update is called once per frame
    void LateUpdate()
    {
        transform.position = player.transform.position + offset;

    }
}


PlayerController.cs:
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class PlayerController : MonoBehaviour
{
    public float speed;
    private Rigidbody2D rbd;
    public Text winText;
    public Text countText;
    public int count = 0;



    // Start is called before the first frame update
    void Start()
    {
        rbd = GetComponent<Rigidbody2D>();

    }
    private void OnTriggerEnter2D(Collider2D other)
    {
        if (other.tag == "pickup")
        {
            other.gameObject.SetActive(false);
            count++;
            setCountText();

        }
    }

    void setCountText()
    {
        countText.text = "Count" + count.ToString();
        if (count == 10)
        {
            winText.text = "You Win";
        }
    }


    // Update is called once per frame
    void FixedUpdate()
    {
        float moveHorizontal = Input.GetAxis("Horizontal");
        float moveVertical = Input.GetAxis("Vertical");
        Vector2 movement = new Vector2(moveHorizontal, moveVertical);
        rbd.AddForce(movement * speed);

    }
}

rotator.cs:
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Rotator : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {

    }

    // Update is called once per frame
    void Update()
    {
        transform.Rotate(new Vector3(0, 0, 45) * Time.deltaTime);

    }
}
*********************************
prac7 
aim*******
To create a 3D roll-ball game.

create 3d project - in hierarchy create new plane rename as ground-create new sphere rename as player
change position of player to 0.5
reset transform panel-
in bottom-project-create -folder-(Material)
Project Window ->select Folder -> give name: materials
-Keep the materials folder selected -> again click on plus sign below the Project Window -> select Material -> give name: background
-drag the background to the hierarchy to ground 
-Select Player -> Add component -> Physics ->Rigidbody
•Select Player -> Add component ->New Script -> give name: PlayerController 
•Inspector window of Player -> go to the end -> change speed to 10
•Select Main Camera -> Inspector window -> and change values 
positin Y(10) Rotation X(45)
•Select Main Camera -> Inspector window -> New Script -> give name: CameraController 
•Select CameraController ->in Inspector window -> drag the Player from hierarchy inside the Camera Controller Script 
file-save as -scene-name as RollBall
•Click on plus sign below the Hierarchy -> Create Empty -> rename: Walls
•Click on plus sign below the Hierarchy ->3D Object ->Cube -> rename: westwall
•Drag westwall inside Walls and change values for westwall
westwall:Position X(-5) Scale(0.5,2,10.5)
•Similarly create for other three walls
Eastwall:Position X(5) Scale(0.5,2,10.5)
northwall:Position Z(5) Scale(10.5,2,0.5)
southwall:Position Z(-5) Scale(10.5,2,0.5)
•Click on plus sign below the Project Window -> select Folder -> give name: prefabs
•Plus Symbol below Hierarchy ->Select 3D Object ->Select Cube -> inside inspector window -> give name: Pickup
•GameObject Tab -> rename: Pickups
•Drag pickup inside pickups
•Now drag pickup to prefabs folder
(uncheck Player) Go to Inspector window of Pickup -> change values
Rotation(45,45,45) Scale(0.5,0.5,0.5)
•	Save and Test
•	Scene Mode ->Change the direction to top view ->Drag and Drop all the Pickups from hieracrchy

•	Update PlayerControllerScript
•	Prefabs folder -> Select Pickup (so it will be updated for all pickups) -> Add component -> Physics ->Rigidbody (check ‘Is Trigger’ &‘Is Kinematic’)
•	Scroll Up -> Click on Tag -> Add Tag ->click on pluss sign -> Name: “PickUp” (this name should be same as the name inside the code of PlayerController Script -> inside OnTriggerEnter) -> Save
•	Now again Click on Tag -> you can see PickUp option -> Select PickUp
•	Click on plus sign below Hierarchy -> UI ->text

•	Canvas is created -> inside it there is Text -> Rename the text to countText

•	Inside inspector window change ‘New Text’ to ‘countText’

•	Change color to yellow

•	Select Player ->Then drag the counTextfrom hierarchy to inspector of Player ->PlayerController Script -> inside CountText

•	Similarly take one more UI -> name: winText (follow the same steps as for countText)


•	Go to Scene -> change from Local to Global
•	Make duplicates of Pickup ( Control + D )

PlayerController.cs:
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class PlayerController : MonoBehaviour
{
    public Text winText;
    public Text countText;
    public int count;
    private Rigidbody rb;
    public float speed;
    // Start is called before the first frame update
    void Start()
    {
        count = 0;
        winText.text = "";
        rb = GetComponent<Rigidbody>();
        SetCountText();
    }

    // Update is called once per frame
    void FixedUpdate()
    {
        float moveHorizontal = Input.GetAxis("Horizontal");
        float moveVertical = Input.GetAxis("Vertical");
        Vector3 movement = new Vector3(moveHorizontal, 0.0f, moveVertical);
        rb.AddForce(movement * speed);

    }
    void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.CompareTag("PickUp"))
        {
            other.gameObject.SetActive(false);
            count = count + 1;
            SetCountText();
        }
    }
    void SetCountText()
    {
        countText.text = "Count : " + count.ToString();
        if (count >= 9)
        {
            winText.text = "You win!";
        }

    }
}

CameraController.cs:

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CameraController : MonoBehaviour
{
    private Vector3 offset;
    public GameObject player;
    // Start is called before the first frame update
    void Start()
    {
        offset = transform.position - player.transform.position;
    }

    // Update is called once per frame
    void LateUpdate()
    {
        transform.position = player.transform.position + offset;
    }
}

Rotator:
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Rotator : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {

    }

    // Update is called once per frame
    void Update()
    {
        transform.Rotate(new Vector3(15, 30, 45) * Time.deltaTime);
    }
}



